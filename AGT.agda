module AGT where

  open import Types
  open import Labels
  open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax)
     renaming (_,_ to ‚ü®_,_‚ü©)
  open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
  open import Data.Empty using (‚ä•; ‚ä•-elim)
  open import Relation.Binary.PropositionalEquality
     using (_‚â°_;_‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app)
  open import Relation.Nullary using (¬¨_)
  open import Relation.Nullary.Negation using (contradiction)

  data SType : Set where
    SNat : SType
    SBool : SType
    _‚áí_ : SType ‚Üí SType ‚Üí SType
    _`√ó_ : SType ‚Üí SType ‚Üí SType
    _`‚äé_ : SType ‚Üí SType ‚Üí SType

  data _‚å¢_ : SType ‚Üí SType ‚Üí Set where
    nat‚å¢ : SNat ‚å¢ SNat
    bool‚å¢ : SBool ‚å¢ SBool
    fun‚å¢ : ‚àÄ{A B A' B'}
        -------------------
      ‚Üí (A ‚áí B) ‚å¢ (A' ‚áí B')
    pair‚å¢ : ‚àÄ{A B A' B'}
        -------------------
      ‚Üí (A `√ó B) ‚å¢ (A' `√ó B')
    sum‚å¢ : ‚àÄ{A B A' B'}
        -------------------
      ‚Üí (A `‚äé B) ‚å¢ (A' `‚äé B')
      
  {- Concretization -}

  data Conc : Type ‚Üí SType ‚Üí Set where
    c-nat : Conc Nat SNat
    c-bool : Conc ùîπ SBool
    c-fun : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ ‚áí T‚ÇÇ) (S‚ÇÅ ‚áí S‚ÇÇ)
    c-pair : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ `√ó T‚ÇÇ) (S‚ÇÅ `√ó S‚ÇÇ)
    c-sum : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ `‚äé T‚ÇÇ) (S‚ÇÅ `‚äé S‚ÇÇ)
    c-unk : ‚àÄ{S} ‚Üí Conc ‚ãÜ S

  infix 6 _`‚äë_
  data _`‚äë_ : Type ‚Üí Type ‚Üí Set where
    prec : ‚àÄ{A B}
          ‚Üí (‚àÄ{S} ‚Üí Conc A S ‚Üí Conc B S)
            ----------------------------
          ‚Üí A `‚äë B

  conc : (A : Type) ‚Üí Œ£[ S ‚àà SType ] Conc A S
  conc ‚ãÜ = ‚ü® SBool , c-unk ‚ü©
  conc Nat = ‚ü® SNat , c-nat ‚ü©
  conc ùîπ = ‚ü® SBool , c-bool ‚ü©
  conc (A ‚áí B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' ‚áí B' , c-fun ca cb ‚ü©
  conc (A `√ó B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' `√ó B' , c-pair ca cb ‚ü©
  conc (A `‚äé B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' `‚äé B' , c-sum ca cb ‚ü©

  prec-unk-inv : ‚àÄ{A}
    ‚Üí ‚ãÜ `‚äë A
      ------
    ‚Üí A ‚â° ‚ãÜ
  prec-unk-inv {‚ãÜ} (prec f) = refl
  prec-unk-inv {Nat} (prec f) with f {SBool} c-unk
  ... | ()
  prec-unk-inv {ùîπ} (prec f) with f {SNat} c-unk
  ... | ()
  prec-unk-inv {A ‚áí A‚ÇÅ} (prec f) with f {SNat} c-unk
  ... | ()
  prec-unk-inv {A `√ó A‚ÇÅ} (prec f) with f {SNat} c-unk
  ... | ()
  prec-unk-inv {A `‚äé A‚ÇÅ} (prec f) with f {SNat} c-unk
  ... | ()

  prec-nat-inv : ‚àÄ{A}
    ‚Üí Nat `‚äë A
      ---------------
    ‚Üí A ‚â° Nat ‚äé A ‚â° ‚ãÜ
  prec-nat-inv {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-nat-inv {Nat} (prec f) = inj‚ÇÅ refl
  prec-nat-inv {ùîπ} (prec f) with f {SNat} c-nat
  ... | ()
  prec-nat-inv {A ‚áí A‚ÇÅ} (prec f) with f {SNat} c-nat
  ... | ()
  prec-nat-inv {A `√ó A‚ÇÅ} (prec f) with f {SNat} c-nat
  ... | ()
  prec-nat-inv {A `‚äé A‚ÇÅ} (prec f) with f {SNat} c-nat
  ... | ()

  prec-bool-inv : ‚àÄ{A}
    ‚Üí ùîπ `‚äë A
      ---------------
    ‚Üí A ‚â° ùîπ ‚äé A ‚â° ‚ãÜ
  prec-bool-inv {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-bool-inv {Nat} (prec f) with f {SBool} c-bool
  ... | ()
  prec-bool-inv {ùîπ} (prec f) = inj‚ÇÅ refl
  prec-bool-inv {A ‚áí A‚ÇÅ} (prec f) with f {SBool} c-bool
  ... | ()
  prec-bool-inv {A `√ó A‚ÇÅ} (prec f) with f {SBool} c-bool
  ... | ()
  prec-bool-inv {A `‚äé A‚ÇÅ} (prec f) with f {SBool} c-bool
  ... | ()

  prec-fun-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ ‚áí A‚ÇÇ) `‚äë (B‚ÇÅ ‚áí B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-fun-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-fun ca ca2)
    ... | c-fun a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-fun ca1 ca )
    ... | c-fun a b = b

  prec-left-fun-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ ‚áí A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ ‚áí B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {Nat} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {ùîπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ ‚áí B‚ÇÇ} (prec f) with prec-fun-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B `√ó B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B `‚äé B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()

  prec-pair-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ `√ó A‚ÇÇ) `‚äë (B‚ÇÅ `√ó B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-pair-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-pair ca ca2)
    ... | c-pair a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-pair ca1 ca )
    ... | c-pair a b = b

  prec-left-pair-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ `√ó A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ `√ó B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {Nat} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {ùîπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B ‚áí B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ `√ó B‚ÇÇ} (prec f) with prec-pair-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B `‚äé B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()

  prec-sum-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ `‚äé A‚ÇÇ) `‚äë (B‚ÇÅ `‚äé B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-sum-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-sum ca ca2)
    ... | c-sum a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-sum ca1 ca )
    ... | c-sum a b = b

  prec-left-sum-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ `‚äé A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ `‚äé B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {Nat} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {ùîπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B ‚áí B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B `√ó B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ `‚äé B‚ÇÇ} (prec f) with prec-sum-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©

  le-implies-prec : ‚àÄ {A B} ‚Üí A ‚äë B ‚Üí B `‚äë A
  
  le-implies-prec unk‚äë = prec (Œª {S} _ ‚Üí c-unk)
  le-implies-prec nat‚äë = prec (Œª {S} z ‚Üí z)
  le-implies-prec bool‚äë = prec (Œª {S} z ‚Üí z)
  le-implies-prec (fun‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-fun x y) ‚Üí c-fun (imp1 x) (imp2 y) }
  le-implies-prec (pair‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-pair x y) ‚Üí c-pair (imp1 x) (imp2 y) }
  le-implies-prec (sum‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-sum x y) ‚Üí c-sum (imp1 x) (imp2 y) }

  prec-implies-le : ‚àÄ{A B} ‚Üí A `‚äë B ‚Üí B ‚äë A
  prec-implies-le {‚ãÜ} {B} (prec f) with prec-unk-inv (prec f)
  ... | eq rewrite eq = unk‚äë
  prec-implies-le {Nat} {B} (prec f) with prec-nat-inv (prec f)
  ... | inj‚ÇÅ eq rewrite eq = nat‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {ùîπ} {B} (prec f) with prec-bool-inv (prec f)
  ... | inj‚ÇÅ eq rewrite eq = bool‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ ‚áí A‚ÇÇ} {B} (prec f) with prec-left-fun-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        fun‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ `√ó A‚ÇÇ} {B} (prec f) with prec-left-pair-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        pair‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ `‚äé A‚ÇÇ} {B} (prec f) with prec-left-sum-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        sum‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë

  data _~'_ : Type ‚Üí Type ‚Üí Set where
    cons : ‚àÄ {A B : Type} {S : SType}
           ‚Üí Conc A S ‚Üí Conc B S
             -------------------
           ‚Üí A ~' B

  cons-implies-ceq : ‚àÄ {A B} ‚Üí A ~ B ‚Üí A ~' B
  cons-implies-ceq {.‚ãÜ}{B} unk~L with conc B
  ... | ‚ü® B' , cb ‚ü© = cons c-unk cb
  cons-implies-ceq {A}{‚ãÜ} unk~R with conc A
  ... | ‚ü® A' , ca ‚ü© = cons ca c-unk
  cons-implies-ceq nat~ = cons c-nat c-nat
  cons-implies-ceq bool~ = cons c-bool c-bool
  cons-implies-ceq {A‚ÇÅ ‚áí A‚ÇÇ}{B‚ÇÅ ‚áí B‚ÇÇ} (fun~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-fun c1 c3) (c-fun c2 c4)
  cons-implies-ceq {A‚ÇÅ `√ó A‚ÇÇ}{B‚ÇÅ `√ó B‚ÇÇ} (pair~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-pair c1 c3) (c-pair c2 c4)
  cons-implies-ceq {A‚ÇÅ `‚äé A‚ÇÇ}{B‚ÇÅ `‚äé B‚ÇÇ} (sum~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-sum c1 c3) (c-sum c2 c4)

  {- to do: ceq-implies-cons -}

  {- Abstraction -}

  data AllFuns : (SType ‚Üí Set) ‚Üí Set where
    funs : ‚àÄ{P}
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
            T ‚â° T‚ÇÅ ‚áí T‚ÇÇ)
        -----------------------------------------------------
      ‚Üí AllFuns P

  data Dom : (SType ‚Üí Set) ‚Üí (SType ‚Üí Set) ‚Üí Set where
    dom : ‚àÄ{P P‚ÇÅ : (SType ‚Üí Set)}
      ‚Üí (‚àÄ{T‚ÇÅ} ‚Üí P‚ÇÅ T‚ÇÅ ‚Üí Œ£[ T‚ÇÇ ‚àà SType ] P (T‚ÇÅ ‚áí T‚ÇÇ))
      ‚Üí (‚àÄ{T‚ÇÅ T‚ÇÇ} ‚Üí P (T‚ÇÅ ‚áí T‚ÇÇ) ‚Üí P‚ÇÅ T‚ÇÅ)
        ---------------------------------------------
      ‚Üí Dom P P‚ÇÅ

  data Cod : (SType ‚Üí Set) ‚Üí (SType ‚Üí Set) ‚Üí Set where
    cod : ‚àÄ{P P‚ÇÇ}
      ‚Üí (‚àÄ{T‚ÇÇ} ‚Üí P‚ÇÇ T‚ÇÇ ‚Üí Œ£[ T‚ÇÅ ‚àà SType ] P (T‚ÇÅ ‚áí T‚ÇÇ))
      ‚Üí (‚àÄ{T‚ÇÅ T‚ÇÇ} ‚Üí P (T‚ÇÅ ‚áí T‚ÇÇ) ‚Üí P‚ÇÇ T‚ÇÇ)
        ---------------------------------------------
      ‚Üí Cod P P‚ÇÇ

  data Abs : (SType ‚Üí Set) ‚Üí Type ‚Üí Set‚ÇÅ where
    abs-nat : ‚àÄ{P : SType ‚Üí Set}
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí T ‚â° SNat)
        -------------------------------
      ‚Üí Abs P Nat
    abs-bool : ‚àÄ{P : SType ‚Üí Set}
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí T ‚â° SBool)
        --------------------------------
      ‚Üí Abs P ùîπ
    abs-fun : ‚àÄ{P P‚ÇÅ P‚ÇÇ : SType ‚Üí Set}{A B : Type}
      ‚Üí AllFuns P
      ‚Üí Dom P P‚ÇÅ  ‚Üí   Abs P‚ÇÅ A
      ‚Üí Cod P P‚ÇÇ  ‚Üí   Abs P‚ÇÇ B
        ----------------------
      ‚Üí Abs P (A ‚áí B)
    abs-any : ‚àÄ{P : SType ‚Üí Set} {S T : SType}
      ‚Üí ¬¨ (S ‚å¢ T)
      ‚Üí P S ‚Üí P T
        ---------------
      ‚Üí Abs P ‚ãÜ

  _‚äÜ_ : (SType ‚Üí Set) ‚Üí (SType ‚Üí Set) ‚Üí Set
  P ‚äÜ P' = ‚àÄ{T : SType} ‚Üí P T ‚Üí P' T


  dom-dom : ‚àÄ {P P' : SType ‚Üí Set} {T T' : SType}
    ‚Üí Dom P P'  ‚Üí  P (T ‚áí T')
      -----------------------
    ‚Üí P' T
  dom-dom (dom f g) p-tt' = g p-tt'

  cod-cod : ‚àÄ {P P' : SType ‚Üí Set} {T T' : SType}
    ‚Üí Cod P P'  ‚Üí  P (T ‚áí T')
      -----------------------
    ‚Üí P' T'
  cod-cod (cod f g) p-tt' = g p-tt'


  conc-abs-sound : ‚àÄ{P : SType ‚Üí Set}{A : Type}
     ‚Üí Abs P A  
       ----------
     ‚Üí P ‚äÜ Conc A
  conc-abs-sound (abs-nat p-nat) {T} pt
    rewrite p-nat {T} pt = c-nat
  conc-abs-sound (abs-bool p-bool) {T} pt
    rewrite p-bool {T} pt = c-bool
  conc-abs-sound (abs-fun allfun dom-p abs-a cod-p abs-b) pt
      with allfun
  ... | funs af
      with af pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
        let ih1 = conc-abs-sound abs-a in
        let ih2 = conc-abs-sound abs-b in
        c-fun (ih1 (dom-dom dom-p pt)) (ih2 (cod-cod cod-p pt))
  conc-abs-sound (abs-any a b c) pt = c-unk

  c-any-nat  : ‚àÄ{A}
     ‚Üí Conc A SNat
     ‚Üí A ‚â° Nat ‚äé A ‚â° ‚ãÜ
  c-any-nat c-nat = inj‚ÇÅ refl
  c-any-nat c-unk = inj‚ÇÇ refl

  c-any-bool  : ‚àÄ{A}
     ‚Üí Conc A SBool
     ‚Üí A ‚â° ùîπ ‚äé A ‚â° ‚ãÜ
  c-any-bool c-bool = inj‚ÇÅ refl
  c-any-bool c-unk = inj‚ÇÇ refl

  c-any-fun  : ‚àÄ{A T‚ÇÅ T‚ÇÇ}
     ‚Üí Conc A (T‚ÇÅ ‚áí T‚ÇÇ)
     ‚Üí (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ ‚áí A‚ÇÇ √ó Conc A‚ÇÅ T‚ÇÅ √ó Conc A‚ÇÇ T‚ÇÇ)
       ‚äé A ‚â° ‚ãÜ
  c-any-fun (c-fun{T‚ÇÅ}{T‚ÇÇ} c c‚ÇÅ) =
      inj‚ÇÅ ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® c , c‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©
  c-any-fun c-unk = inj‚ÇÇ refl

  conc-sh-cons : ‚àÄ{A T‚ÇÅ T‚ÇÇ}
     ‚Üí Conc A T‚ÇÅ  ‚Üí  Conc A T‚ÇÇ
       -----------------------
     ‚Üí A ‚â° ‚ãÜ ‚äé (T‚ÇÅ ‚å¢ T‚ÇÇ)
  conc-sh-cons c-nat c-nat = inj‚ÇÇ nat‚å¢
  conc-sh-cons c-bool c-bool = inj‚ÇÇ bool‚å¢
  conc-sh-cons (c-fun a-t1 a-t3) (c-fun a-t2 a-t4) = inj‚ÇÇ fun‚å¢
  conc-sh-cons (c-pair a-t1 a-t3) (c-pair a-t2 a-t4) = inj‚ÇÇ pair‚å¢
  conc-sh-cons (c-sum a-t1 a-t3) (c-sum a-t2 a-t4) = inj‚ÇÇ sum‚å¢
  conc-sh-cons c-unk a-t2 = inj‚ÇÅ refl

  abs-optimal : ‚àÄ {P : SType ‚Üí Set} {A A' : Type}
    ‚Üí (Œ£[ T ‚àà SType ] P T)
    ‚Üí P ‚äÜ Conc A  ‚Üí  Abs P A'
      -------------------------
    ‚Üí A ‚äë A'
  abs-optimal ‚ü® T , pt ‚ü© p-ca (abs-nat all-nat)
      with pt
  ... | pt'
      rewrite all-nat pt
      with c-any-nat (p-ca pt') 
  ... | inj‚ÇÅ eq rewrite eq = Refl‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  abs-optimal ‚ü® T , pt ‚ü© p-ca (abs-bool all-bool)
      with pt
  ... | pt'
      rewrite all-bool pt
      with c-any-bool (p-ca pt') 
  ... | inj‚ÇÅ eq rewrite eq = Refl‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  abs-optimal ‚ü® T , pt ‚ü© p-ca
          (abs-fun{P}{P‚ÇÅ}{P‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} allf dom-pp1 abs-p1-b1 cod-p-p2 abs-p2-b2)
      with allf
  ... | funs af
      with af pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq
      with dom-pp1
  ... | dom dom-f dom-g 
      with cod-p-p2
  ... | cod cod-f cod-g 
      with c-any-fun (p-ca pt)
  ... | inj‚ÇÅ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® a=a12 , ‚ü® c1 , c2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite a=a12 =
      let ih1 = abs-optimal ‚ü® T‚ÇÅ , (dom-g pt) ‚ü© p1-a1 abs-p1-b1 in
      let ih2 = abs-optimal ‚ü® T‚ÇÇ , (cod-g pt) ‚ü© p2-a2 abs-p2-b2 in
      fun‚äë ih1 ih2
      where
      p1-a1 : P‚ÇÅ ‚äÜ Conc A‚ÇÅ
      p1-a1 {T} p1t with dom-f p1t
      ... | ‚ü® T‚ÇÇ , p-tt2 ‚ü©
          with p-ca p-tt2 
      ... | c-fun c1 c2 = c1

      p2-a2 : P‚ÇÇ ‚äÜ Conc A‚ÇÇ
      p2-a2 {T} p1t with cod-f p1t
      ... | ‚ü® T‚ÇÅ , p-t1t ‚ü©
          with p-ca p-t1t 
      ... | c-fun c1 c2 = c2

  ... | inj‚ÇÇ a=unk rewrite a=unk =
      unk‚äë
  abs-optimal ‚ü® T , pt ‚ü© p-ca (abs-any a b c)
      with conc-sh-cons (p-ca b) (p-ca c) 
  ... | inj‚ÇÅ A‚â°‚ãÜ rewrite A‚â°‚ãÜ = 
        unk‚äë
  ... | inj‚ÇÇ x = 
        contradiction x a

  {- 

   In AGT with simple types, casts are a triple of types where the
   middle type is an upper bound of the source and target, which
   corresponds to the threesomes of Siek and Wadler (2010).

   to do: Fix the blame story here. It's currently wrong
    because it doesn't have middle types.

   -}

  data Cast : Type ‚Üí Set where
    _‚áí_‚ü®_‚ü©‚áí_ : (A : Type) ‚Üí (B : Type) ‚Üí Label ‚Üí (C : Type)
              ‚Üí {ab : A ‚äë B } ‚Üí {cb : C ‚äë B} ‚Üí Cast (A ‚áí C)
    error : (A : Type) ‚Üí (B : Type) ‚Üí Label ‚Üí Cast (A ‚áí B)

  import ParamCastCalculus
  module CastCalc = ParamCastCalculus Cast
  open CastCalc
  
  {-

   The identity casts (at base type) and error casts are active. All
   the other casts are inert. This treatment of identity casts as
   active is a bit different from the AGT paper, but I think it is
   nicer.

   -}

  data Inert : ‚àÄ{A} ‚Üí Cast A ‚Üí Set where
    inert : ‚àÄ{A B C ‚Ñì} {ab : A ‚äë B} {cb : C ‚äë B}
          ‚Üí ¬¨ (Base A √ó Base C √ó A ‚â° C)
          ‚Üí Inert ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí C){ab}{cb})

  data Active : ‚àÄ{A} ‚Üí Cast A ‚Üí Set where
    activeId : ‚àÄ {A}{‚Ñì}{aa}{aa'} ‚Üí Base A ‚Üí Active ((A ‚áí A ‚ü® ‚Ñì ‚ü©‚áí A){aa}{aa'})
    activeError : ‚àÄ {A B ‚Ñì} ‚Üí Active (error A B ‚Ñì)

  ActiveOrInert : ‚àÄ{A} ‚Üí (c : Cast A) ‚Üí Active c ‚äé Inert c
  ActiveOrInert ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí C){ab}{cb})
      with base A | base C
  ... | inj‚ÇÅ bA | inj‚ÇÇ bC = inj‚ÇÇ (inert (Œª z ‚Üí bC (proj‚ÇÅ (proj‚ÇÇ z))))
  ... | inj‚ÇÇ bA | inj‚ÇÅ bC = inj‚ÇÇ (inert (Œª z ‚Üí bA (proj‚ÇÅ z)))
  ... | inj‚ÇÇ bA | inj‚ÇÇ bC = inj‚ÇÇ (inert (Œª z ‚Üí bC (proj‚ÇÅ (proj‚ÇÇ z))))
  ... | inj‚ÇÅ bA | inj‚ÇÅ bC
      with base-eq? A C {bA} {bC}
  ... | inj‚ÇÇ neq = inj‚ÇÇ (inert (Œª z ‚Üí neq (proj‚ÇÇ (proj‚ÇÇ z))))
  ... | inj‚ÇÅ eq rewrite eq
      with ‚äëRBase bC cb
  ... | b=c rewrite b=c = inj‚ÇÅ (activeId bA)
  
  ActiveOrInert (error A B x) = inj‚ÇÅ activeError
  
  import EfficientParamCasts
  module EPCR = EfficientParamCasts Cast Inert Active ActiveOrInert
  open EPCR

  applyCast : ‚àÄ {Œì A B} ‚Üí (M : Œì ‚ä¢ A) ‚Üí (Value M) ‚Üí (c : Cast (A ‚áí B))
            ‚Üí ‚àÄ {a : Active c} ‚Üí Œì ‚ä¢ B
  applyCast M v .(_ ‚áí _ ‚ü® _ ‚ü©‚áí _) {activeId x} = M
  applyCast M v (error _ _ ‚Ñì) {activeError} = blame ‚Ñì

  funCast : ‚àÄ {Œì A A' B'} ‚Üí (M : Œì ‚ä¢ A) ‚Üí SimpleValue M
          ‚Üí (c : Cast (A ‚áí (A' ‚áí B'))) ‚Üí ‚àÄ {i : Inert c} ‚Üí Œì ‚ä¢ A' ‚Üí Œì ‚ä¢ B'
  funCast M v ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí (C‚ÇÅ ‚áí C‚ÇÇ)){ab}{cb}) {inert _} N
      with ‚äëR‚áí cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12
      with ‚äëL‚áí ab
  ... | inj‚ÇÅ A‚â°‚ãÜ = contradiction A‚â°‚ãÜ (simple‚ãÜ M v)
  ... | inj‚ÇÇ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® A=A‚ÇÅ‚áíA‚ÇÇ , ‚ü® A1‚äëB1 , A2‚äëB2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite A=A‚ÇÅ‚áíA‚ÇÇ =
     (M ¬∑ (N ‚ü® (C‚ÇÅ ‚áí B‚ÇÅ ‚ü® ‚Ñì ‚ü©‚áí A‚ÇÅ){c1‚äëb1}{A1‚äëB1} ‚ü©))
             ‚ü® (A‚ÇÇ ‚áí B‚ÇÇ ‚ü® ‚Ñì ‚ü©‚áí C‚ÇÇ){A2‚äëB2}{c2‚äëb2} ‚ü©
             
  fstCast : ‚àÄ {Œì A A' B'} ‚Üí (M : Œì ‚ä¢ A) ‚Üí SimpleValue M
            ‚Üí (c : Cast (A ‚áí (A' `√ó B'))) ‚Üí ‚àÄ {i : Inert c} ‚Üí Œì ‚ä¢ A'
  fstCast M v ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí (C‚ÇÅ `√ó C‚ÇÇ)){ab}{cb}) {inert _}
      with ‚äëR√ó cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12
      with ‚äëL√ó ab
  ... | inj‚ÇÅ A‚â°‚ãÜ = contradiction A‚â°‚ãÜ (simple‚ãÜ M v)
  ... | inj‚ÇÇ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® A=A‚ÇÅ√óA‚ÇÇ , ‚ü® A1‚äëB1 , A2‚äëB2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite A=A‚ÇÅ√óA‚ÇÇ =
        (fst M) ‚ü® (A‚ÇÅ ‚áí B‚ÇÅ ‚ü® ‚Ñì ‚ü©‚áí C‚ÇÅ){A1‚äëB1}{c1‚äëb1} ‚ü©

  sndCast : ‚àÄ {Œì A A' B'} ‚Üí (M : Œì ‚ä¢ A) ‚Üí SimpleValue M
            ‚Üí (c : Cast (A ‚áí (A' `√ó B'))) ‚Üí ‚àÄ {i : Inert c} ‚Üí Œì ‚ä¢ B'
  sndCast M v ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí (C‚ÇÅ `√ó C‚ÇÇ)){ab}{cb}) {inert _}
      with ‚äëR√ó cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12
      with ‚äëL√ó ab
  ... | inj‚ÇÅ A‚â°‚ãÜ = contradiction A‚â°‚ãÜ (simple‚ãÜ M v)
  ... | inj‚ÇÇ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® A=A‚ÇÅ√óA‚ÇÇ , ‚ü® A1‚äëB1 , A2‚äëB2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite A=A‚ÇÅ√óA‚ÇÇ =
        (snd M) ‚ü® (A‚ÇÇ ‚áí B‚ÇÇ ‚ü® ‚Ñì ‚ü©‚áí C‚ÇÇ){A2‚äëB2}{c2‚äëb2} ‚ü©

  caseCast : ‚àÄ {Œì A A' B' C} ‚Üí (L : Œì ‚ä¢ A) ‚Üí SimpleValue L
             ‚Üí (c : Cast (A ‚áí (A' `‚äé B')))
             ‚Üí ‚àÄ {i : Inert c} ‚Üí (Œì ‚ä¢ A' ‚áí C) ‚Üí (Œì ‚ä¢ B' ‚áí C) ‚Üí Œì ‚ä¢ C
  caseCast{C = C} L v ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí (C‚ÇÅ `‚äé C‚ÇÇ)){ab}{cb}) {inert _} M N
      with ‚äëR‚äé cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12
      with ‚äëL‚äé ab
  ... | inj‚ÇÅ A‚â°‚ãÜ = contradiction A‚â°‚ãÜ (simple‚ãÜ L v)
  ... | inj‚ÇÇ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® A=A‚ÇÅ‚äéA‚ÇÇ , ‚ü® a1‚äëb1 , a2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite A=A‚ÇÅ‚äéA‚ÇÇ =
      case L (M ‚ü® ((C‚ÇÅ ‚áí C) ‚áí (B‚ÇÅ ‚áí C) ‚ü® ‚Ñì ‚ü©‚áí (A‚ÇÅ ‚áí C)){le1}{le2} ‚ü©)
             (N ‚ü® ((C‚ÇÇ ‚áí C) ‚áí (B‚ÇÇ ‚áí C) ‚ü® ‚Ñì ‚ü©‚áí (A‚ÇÇ ‚áí C)){le3}{le4} ‚ü©)
      where
      le1 = fun‚äë c1‚äëb1 Refl‚äë
      le2 = fun‚äë a1‚äëb1 Refl‚äë
      le3 = fun‚äë c2‚äëb2 Refl‚äë
      le4 = fun‚äë a2‚äëb2 Refl‚äë

  compose : ‚àÄ{A B C} ‚Üí Cast (A ‚áí B) ‚Üí Cast (B ‚áí C) ‚Üí Cast (A ‚áí C)
  compose ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí C){ab}{cb}) ((C ‚áí B' ‚ü® ‚Ñì' ‚ü©‚áí C'){cb'}{c'b'})
      with B `~ B'
  ... | inj‚ÇÇ nc = error A C' ‚Ñì'
  ... | inj‚ÇÅ B~B'
      with (B `‚äî B') {B~B'}
  ... | ‚ü® B‚äîB' , ‚ü® ‚ü® B‚äëB‚äîB' , B'‚äëB‚äîB' ‚ü© , lb ‚ü© ‚ü© =
         (A ‚áí B‚äîB' ‚ü® ‚Ñì' ‚ü©‚áí C'){Trans‚äë ab B‚äëB‚äîB'}{Trans‚äë c'b' B'‚äëB‚äîB'}
  compose (A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí C) (error C C' ‚Ñì') = (error A C' ‚Ñì'){- wrong wrt blame-}
  compose (error A B ‚Ñì) (error B C ‚Ñì') = (error A C ‚Ñì)
  compose (error A B ‚Ñì) (B ‚áí B' ‚ü® ‚Ñì‚ÇÅ ‚ü©‚áí C) = (error A C ‚Ñì)

  baseNotInert : ‚àÄ {A B} ‚Üí (c : Cast (A ‚áí B)) ‚Üí Base B ‚Üí A ‚â¢ ‚ãÜ ‚Üí ¬¨ Inert c
  baseNotInert ((A ‚áí B ‚ü® ‚Ñì ‚ü©‚áí C){ab}{cb}) bC A‚â¢‚ãÜ (inert p)
      with ‚äëRBase bC cb
  ... | b‚â°c rewrite b‚â°c
      with ‚äëLBase bC ab
  ... | inj‚ÇÅ eq rewrite eq = p ‚ü® bC , ‚ü® bC , refl ‚ü© ‚ü©
  ... | inj‚ÇÇ eq‚ãÜ = contradiction eq‚ãÜ A‚â¢‚ãÜ
  baseNotInert (error A B x) b A‚ãÜ = Œª ()

  module Red = EPCR.Reduction applyCast funCast fstCast sndCast caseCast
                  baseNotInert compose
  open Red
