module AGT where

  open import Types
  open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax)
     renaming (_,_ to ‚ü®_,_‚ü©)
  open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
  open import Data.Empty using (‚ä•; ‚ä•-elim)
  open import Relation.Binary.PropositionalEquality
     using (_‚â°_;_‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app)

  data SType : Set where
    SNat : SType
    SBool : SType
    _‚áí_ : SType ‚Üí SType ‚Üí SType
    _`√ó_ : SType ‚Üí SType ‚Üí SType
    _`‚äé_ : SType ‚Üí SType ‚Üí SType

  data Conc : Type ‚Üí SType ‚Üí Set where
    c-nat : Conc Nat SNat
    c-bool : Conc ùîπ SBool
    c-fun : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ ‚áí T‚ÇÇ) (S‚ÇÅ ‚áí S‚ÇÇ)
    c-pair : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ `√ó T‚ÇÇ) (S‚ÇÅ `√ó S‚ÇÇ)
    c-sum : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ `‚äé T‚ÇÇ) (S‚ÇÅ `‚äé S‚ÇÇ)
    c-unk : ‚àÄ{S} ‚Üí Conc ‚ãÜ S

  infix 6 _`‚äë_
  data _`‚äë_ : Type ‚Üí Type ‚Üí Set where
    prec : ‚àÄ{A B}
          ‚Üí (‚àÄ{S} ‚Üí Conc A S ‚Üí Conc B S)
            ----------------------------
          ‚Üí A `‚äë B

  conc : (A : Type) ‚Üí Œ£[ S ‚àà SType ] Conc A S
  conc ‚ãÜ = ‚ü® SBool , c-unk ‚ü©
  conc Nat = ‚ü® SNat , c-nat ‚ü©
  conc ùîπ = ‚ü® SBool , c-bool ‚ü©
  conc (A ‚áí B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' ‚áí B' , c-fun ca cb ‚ü©
  conc (A `√ó B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' `√ó B' , c-pair ca cb ‚ü©
  conc (A `‚äé B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' `‚äé B' , c-sum ca cb ‚ü©

  prec-unk-inv : ‚àÄ{A}
    ‚Üí ‚ãÜ `‚äë A
      ------
    ‚Üí A ‚â° ‚ãÜ
  prec-unk-inv {‚ãÜ} (prec f) = refl
  prec-unk-inv {Nat} (prec f) with f {SBool} c-unk
  ... | ()
  prec-unk-inv {ùîπ} (prec f) with f {SNat} c-unk
  ... | ()
  prec-unk-inv {A ‚áí A‚ÇÅ} (prec f) with f {SNat} c-unk
  ... | ()
  prec-unk-inv {A `√ó A‚ÇÅ} (prec f) with f {SNat} c-unk
  ... | ()
  prec-unk-inv {A `‚äé A‚ÇÅ} (prec f) with f {SNat} c-unk
  ... | ()

  prec-nat-inv : ‚àÄ{A}
    ‚Üí Nat `‚äë A
      ---------------
    ‚Üí A ‚â° Nat ‚äé A ‚â° ‚ãÜ
  prec-nat-inv {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-nat-inv {Nat} (prec f) = inj‚ÇÅ refl
  prec-nat-inv {ùîπ} (prec f) with f {SNat} c-nat
  ... | ()
  prec-nat-inv {A ‚áí A‚ÇÅ} (prec f) with f {SNat} c-nat
  ... | ()
  prec-nat-inv {A `√ó A‚ÇÅ} (prec f) with f {SNat} c-nat
  ... | ()
  prec-nat-inv {A `‚äé A‚ÇÅ} (prec f) with f {SNat} c-nat
  ... | ()

  prec-bool-inv : ‚àÄ{A}
    ‚Üí ùîπ `‚äë A
      ---------------
    ‚Üí A ‚â° ùîπ ‚äé A ‚â° ‚ãÜ
  prec-bool-inv {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-bool-inv {Nat} (prec f) with f {SBool} c-bool
  ... | ()
  prec-bool-inv {ùîπ} (prec f) = inj‚ÇÅ refl
  prec-bool-inv {A ‚áí A‚ÇÅ} (prec f) with f {SBool} c-bool
  ... | ()
  prec-bool-inv {A `√ó A‚ÇÅ} (prec f) with f {SBool} c-bool
  ... | ()
  prec-bool-inv {A `‚äé A‚ÇÅ} (prec f) with f {SBool} c-bool
  ... | ()

  prec-fun-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ ‚áí A‚ÇÇ) `‚äë (B‚ÇÅ ‚áí B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-fun-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-fun ca ca2)
    ... | c-fun a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-fun ca1 ca )
    ... | c-fun a b = b

  prec-left-fun-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ ‚áí A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ ‚áí B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {Nat} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {ùîπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ ‚áí B‚ÇÇ} (prec f) with prec-fun-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B `√ó B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B `‚äé B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()

  prec-pair-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ `√ó A‚ÇÇ) `‚äë (B‚ÇÅ `√ó B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-pair-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-pair ca ca2)
    ... | c-pair a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-pair ca1 ca )
    ... | c-pair a b = b

  prec-left-pair-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ `√ó A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ `√ó B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {Nat} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {ùîπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B ‚áí B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ `√ó B‚ÇÇ} (prec f) with prec-pair-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B `‚äé B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()

  prec-sum-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ `‚äé A‚ÇÇ) `‚äë (B‚ÇÅ `‚äé B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-sum-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-sum ca ca2)
    ... | c-sum a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-sum ca1 ca )
    ... | c-sum a b = b

  prec-left-sum-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ `‚äé A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ `‚äé B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {Nat} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {ùîπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B ‚áí B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B `√ó B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ `‚äé B‚ÇÇ} (prec f) with prec-sum-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©

  le-implies-prec : ‚àÄ {A B} ‚Üí A ‚äë B ‚Üí B `‚äë A
  
  le-implies-prec unk‚äë = prec (Œª {S} _ ‚Üí c-unk)
  le-implies-prec nat‚äë = prec (Œª {S} z ‚Üí z)
  le-implies-prec bool‚äë = prec (Œª {S} z ‚Üí z)
  le-implies-prec (fun‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-fun x y) ‚Üí c-fun (imp1 x) (imp2 y) }
  le-implies-prec (pair‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-pair x y) ‚Üí c-pair (imp1 x) (imp2 y) }
  le-implies-prec (sum‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-sum x y) ‚Üí c-sum (imp1 x) (imp2 y) }

  prec-implies-le : ‚àÄ{A B} ‚Üí A `‚äë B ‚Üí B ‚äë A
  prec-implies-le {‚ãÜ} {B} (prec f) with prec-unk-inv (prec f)
  ... | eq rewrite eq = unk‚äë
  prec-implies-le {Nat} {B} (prec f) with prec-nat-inv (prec f)
  ... | inj‚ÇÅ eq rewrite eq = nat‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {ùîπ} {B} (prec f) with prec-bool-inv (prec f)
  ... | inj‚ÇÅ eq rewrite eq = bool‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ ‚áí A‚ÇÇ} {B} (prec f) with prec-left-fun-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        fun‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ `√ó A‚ÇÇ} {B} (prec f) with prec-left-pair-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        pair‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ `‚äé A‚ÇÇ} {B} (prec f) with prec-left-sum-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        sum‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë

  data _~'_ : Type ‚Üí Type ‚Üí Set where
    cons : ‚àÄ {A B : Type} {S : SType}
           ‚Üí Conc A S ‚Üí Conc B S
             -------------------
           ‚Üí A ~' B

  cons-implies-ceq : ‚àÄ {A B} ‚Üí A ~ B ‚Üí A ~' B
  cons-implies-ceq {.‚ãÜ}{B} unk~L with conc B
  ... | ‚ü® B' , cb ‚ü© = cons c-unk cb
  cons-implies-ceq {A}{‚ãÜ} unk~R with conc A
  ... | ‚ü® A' , ca ‚ü© = cons ca c-unk
  cons-implies-ceq nat~ = cons c-nat c-nat
  cons-implies-ceq bool~ = cons c-bool c-bool
  cons-implies-ceq {A‚ÇÅ ‚áí A‚ÇÇ}{B‚ÇÅ ‚áí B‚ÇÇ} (fun~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-fun c1 c3) (c-fun c2 c4)
  cons-implies-ceq {A‚ÇÅ `√ó A‚ÇÇ}{B‚ÇÅ `√ó B‚ÇÇ} (pair~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-pair c1 c3) (c-pair c2 c4)
  cons-implies-ceq {A‚ÇÅ `‚äé A‚ÇÇ}{B‚ÇÅ `‚äé B‚ÇÇ} (sum~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-sum c1 c3) (c-sum c2 c4)

  {- to do: ceq-implies-cons -}

  
