open import Types
open import Variables
open import Labels
open import Data.Nat using (‚Ñï; zero; suc)

module GTLC2CC
  (Cast : Type ‚Üí Set)
  (cast : (A : Type) ‚Üí (B : Type) ‚Üí Label ‚Üí {c : A ~ B } ‚Üí Cast (A ‚áí B))
  where

  open import GTLC
  import ParamCastCalculus
  module CastCalc = ParamCastCalculus Cast
  open CastCalc
  open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
  open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
  open import Data.Maybe

  {- to do: change to dom/cod a la AGT -}
  match‚áí : (A : Type) ‚Üí Maybe (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ~ (A‚ÇÅ ‚áí A‚ÇÇ))
  match‚áí ‚ãÜ = just (‚ü® ‚ãÜ , (‚ü® ‚ãÜ , unk~L ‚ü©) ‚ü©)
  match‚áí Nat = nothing
  match‚áí ùîπ = nothing
  match‚áí (A ‚áí A‚ÇÅ) = just (‚ü® A , (‚ü® A‚ÇÅ , Refl~ ‚ü©) ‚ü©)
  match‚áí (A `√ó A‚ÇÅ) = nothing
  match‚áí (A `‚äé A‚ÇÅ) = nothing

  match√ó : (A : Type) ‚Üí Maybe (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ~ (A‚ÇÅ `√ó A‚ÇÇ))
  match√ó ‚ãÜ = just (‚ü® ‚ãÜ , (‚ü® ‚ãÜ , unk~L ‚ü©) ‚ü©)
  match√ó Nat = nothing
  match√ó ùîπ = nothing
  match√ó (A ‚áí A‚ÇÅ) = nothing
  match√ó (A `√ó A‚ÇÅ) = just (‚ü® A , (‚ü® A‚ÇÅ , Refl~ ‚ü©) ‚ü©)
  match√ó (A `‚äé A‚ÇÅ) = nothing

  match‚äé : (A : Type) ‚Üí Maybe (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ~ (A‚ÇÅ `‚äé A‚ÇÇ))
  match‚äé ‚ãÜ = just (‚ü® ‚ãÜ , (‚ü® ‚ãÜ , unk~L ‚ü©) ‚ü©)
  match‚äé Nat = nothing
  match‚äé ùîπ = nothing
  match‚äé (A ‚áí A‚ÇÅ) = nothing
  match‚äé (A `√ó A‚ÇÅ) = nothing
  match‚äé (A `‚äé A‚ÇÅ) = just (‚ü® A , (‚ü® A‚ÇÅ , Refl~ ‚ü©) ‚ü©)

  matchùîπ : (A : Type) ‚Üí Maybe (A ~ ùîπ)
  matchùîπ ‚ãÜ = just (consis unk‚äë bool‚äë)
  matchùîπ Nat = nothing
  matchùîπ ùîπ = just (consis bool‚äë bool‚äë)
  matchùîπ (A ‚áí A‚ÇÅ) = nothing
  matchùîπ (A `√ó A‚ÇÅ) = nothing
  matchùîπ (A `‚äé A‚ÇÅ) = nothing

  compile : {Œì : Context} ‚Üí (M : Term) ‚Üí Maybe (Œ£[ A ‚àà Type ] Œì ‚ä¢ A)
  compile {Œì} (`_ x) with lookup Œì x
  ... | nothing = nothing
  ... | just (‚ü® A , k ‚ü©) = just (‚ü® A , ` k ‚ü©)
  compile {Œì} (∆õ A , M) with compile {Œì , A} M
  ... | nothing = nothing
  ... | just (‚ü® B , M' ‚ü©) = just (‚ü® (A ‚áí B) , (∆õ A , M') ‚ü©)
  compile {Œì} (M ¬∑ N at ‚Ñì) with compile {Œì} M | compile {Œì} N
  ... | nothing | _ = nothing
  ... | just _ | nothing = nothing
  ... | just (‚ü® A , M' ‚ü©) | just (‚ü® B , N' ‚ü©) with match‚áí A
  ...    | nothing = nothing
  ...    | just (‚ü® A‚ÇÅ , (‚ü® A‚ÇÇ , c ‚ü©) ‚ü©) with B `~ A‚ÇÅ 
  ...       | inj‚ÇÅ d = 
              let M'' = (M' ‚ü® (cast A (A‚ÇÅ ‚áí A‚ÇÇ) (pos ‚Ñì) {c}) ‚ü©) in
              let N'' = (N' ‚ü® (cast B A‚ÇÅ (pos ‚Ñì) {d}) ‚ü©) in
              just (‚ü® A‚ÇÇ , M'' ¬∑ N'' ‚ü©)
  ...       | inj‚ÇÇ d = nothing
  compile {Œì} ($_ {A} x) with prim A
  ... | inj‚ÇÅ p = just (‚ü® A , ($ x){p} ‚ü©)
  ... | inj‚ÇÇ p = nothing  
  compile {Œì} (if L M N ‚Ñì) with compile {Œì} L | compile {Œì} M | compile {Œì} N
  ... | nothing | _ | _ = nothing
  ... | just _ | nothing | _ = nothing
  ... | just _ | just _ | nothing = nothing
  ... | just (‚ü® A , L' ‚ü©) | just (‚ü® B , M' ‚ü©) | just (‚ü® C , N' ‚ü©) with matchùîπ A
  ...    | nothing = nothing
  ...    | just c with B `~ C
  ...        | inj‚ÇÇ _ = nothing
  ...        | inj‚ÇÅ d with (B `‚äî C) {d}
  ...           | ‚ü® D , LUB ‚ü© =
                  let L'' = (L' ‚ü® (cast A ùîπ (pos ‚Ñì) {c}) ‚ü©) in
                  let M'' = (M' ‚ü® (cast B D (pos ‚Ñì) {consis {D} (proj‚ÇÅ (proj‚ÇÅ LUB)) (proj‚ÇÇ LUB (proj‚ÇÅ LUB))}) ‚ü©) in
                  let N'' = (N' ‚ü® (cast C D (pos ‚Ñì) {consis {D} (proj‚ÇÇ (proj‚ÇÅ LUB)) (proj‚ÇÇ LUB (proj‚ÇÅ LUB))}) ‚ü©) in
                  just (‚ü® D , if L'' M'' N'' ‚ü©)

  compile {Œì} (cons M N) with compile {Œì} M | compile {Œì} N
  ... | nothing | _       = nothing
  ... | just _  | nothing = nothing
  ... | just (‚ü® A , M' ‚ü©) | just (‚ü® B , N' ‚ü©) = just (‚ü® (A `√ó B) , (cons M' N') ‚ü©)
  compile {Œì} (fst M ‚Ñì) with compile {Œì} M
  ... | nothing = nothing
  ... | just (‚ü® A , M' ‚ü©) with match√ó A
  ...     | nothing = nothing
  ...     | just (‚ü® A‚ÇÅ , (‚ü® A‚ÇÇ , c ‚ü©) ‚ü©) =
            let M'' = (M' ‚ü® cast A (A‚ÇÅ `√ó A‚ÇÇ) (pos ‚Ñì) {c} ‚ü©) in
            just (‚ü® A‚ÇÅ , fst M'' ‚ü©)
  compile {Œì} (snd M ‚Ñì) with compile {Œì} M
  ... | nothing = nothing
  ... | just (‚ü® A , M' ‚ü©) with match√ó A
  ...     | nothing = nothing
  ...     | just (‚ü® A‚ÇÅ , (‚ü® A‚ÇÇ , c ‚ü©) ‚ü©) =
            let M'' = (M' ‚ü® cast A (A‚ÇÅ `√ó A‚ÇÇ) (pos ‚Ñì) {c} ‚ü©) in
            just (‚ü® A‚ÇÇ , snd M'' ‚ü©)
  compile {Œì} (inl B M) with compile {Œì} M
  ... | nothing = nothing
  ... | just (‚ü® A , M' ‚ü©) = just (‚ü® A `‚äé B , inl M' ‚ü©)
  compile {Œì} (inr A M) with compile {Œì} M
  ... | nothing = nothing
  ... | just (‚ü® B , M' ‚ü©) = just (‚ü® A `‚äé B , inr M' ‚ü©)
  compile {Œì} (case L M N ‚Ñì) with compile {Œì} L | compile {Œì} M | compile {Œì} N
  ... | nothing | _ | _ = nothing
  ... | just _ | nothing | _ = nothing
  ... | just _ | just _ | nothing = nothing
  ... | just (‚ü® A , L' ‚ü©) | just (‚ü® B , M‚ÇÅ ‚ü©) | just (‚ü® C , N‚ÇÅ ‚ü©) with match‚äé A
  ...     | nothing = nothing
  ...     | just (‚ü® A‚ÇÅ , (‚ü® A‚ÇÇ , a ‚ü©) ‚ü©) with match‚áí B | match‚áí C
  ...        | nothing | _ = nothing
  ...        | just _ | nothing = nothing
  ...        | just (‚ü® B‚ÇÅ , (‚ü® B‚ÇÇ , b ‚ü©) ‚ü©) | just (‚ü® C‚ÇÅ , (‚ü® C‚ÇÇ , c ‚ü©) ‚ü©) with B‚ÇÅ `~ A‚ÇÅ | C‚ÇÅ `~ A‚ÇÇ
  ...           | inj‚ÇÇ _ | _ = nothing
  ...           | inj‚ÇÅ _ | inj‚ÇÇ _ = nothing
  ...           | inj‚ÇÅ ba | inj‚ÇÅ ca with B‚ÇÇ `~ C‚ÇÇ
  ...              | inj‚ÇÇ _ = nothing
  ...              | inj‚ÇÅ bc with (B‚ÇÇ `‚äî C‚ÇÇ) {bc}
  ...                | ‚ü® D , LUB ‚ü© =
                       let L'' = (L' ‚ü® cast A (A‚ÇÅ `‚äé A‚ÇÇ) (pos ‚Ñì) {a} ‚ü©) in
                       let M‚ÇÇ = (M‚ÇÅ ‚ü® cast B (B‚ÇÅ ‚áí B‚ÇÇ) (pos ‚Ñì) {b} ‚ü©) in
                       let N‚ÇÇ = (N‚ÇÅ ‚ü® cast C (C‚ÇÅ ‚áí C‚ÇÇ) (pos ‚Ñì) {c} ‚ü©) in
                       let f1 = fun~ ba (consis (proj‚ÇÅ (proj‚ÇÅ LUB)) (proj‚ÇÇ LUB (proj‚ÇÅ LUB))) in
                       let M‚ÇÉ = (M‚ÇÇ ‚ü® cast (B‚ÇÅ ‚áí B‚ÇÇ) (A‚ÇÅ ‚áí D) (pos ‚Ñì) {f1} ‚ü©) in
                       let f2 =  fun~ ca (consis (proj‚ÇÇ (proj‚ÇÅ LUB)) (proj‚ÇÇ LUB (proj‚ÇÅ LUB))) in
                       let N‚ÇÉ = (N‚ÇÇ ‚ü® cast (C‚ÇÅ ‚áí C‚ÇÇ) (A‚ÇÇ ‚áí D) (pos ‚Ñì) {f2} ‚ü©) in
                       just (‚ü® D , case L'' M‚ÇÉ N‚ÇÉ ‚ü©)

